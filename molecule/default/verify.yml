---
# This is an example playbook to execute goss tests.
# Tests need distributed to the appropriate ansible host/groups
# prior to execution by `goss validate`.

- name: Verify
  hosts: all
  become: true

  vars:
    root_path: "{{lookup('env', 'MOLECULE_PROJECT_DIRECTORY')}}"
    scenario: "{{ lookup('env', 'MOLECULE_SCENARIO_NAME') }}"
    log_path: "{{root_path}}/logs/molecule/{{scenario}}/{{inventory_hostname}}"
    test_path: "{{ lookup('env', 'MOLECULE_VERIFIER_TEST_DIRECTORY') }}"

  vars_files:
    - goss.yml

  tasks:
    - name: Download Goss
      local_action: get_url
      args:
        url: "{{ goss_url }}"
        dest: "/tmp/goss-linux-{{ goss_arch }}"
        sha256sum: "{{ goss_sha256sum }}"
      register: download_goss
      until: download_goss is succeeded
      retries: 3

    - name: Install Goss
      copy: src="/tmp/goss-linux-{{ goss_arch }}" dest="{{goss_dst}}" mode=0755

    - name: Copy Goss tests to remote
      copy:
        src: "{{item}}"
        dest: "{{goss_test_directory}}/{{item | basename}}"
      with_fileglob:
        - "{{test_path}}/test_*.yml"

    - name: Execute Goss tests
      command: "{{ goss_dst }} --vars {{goss_test_variables}} -g {{ item | basename }} validate --format {{ goss_format }}"
      args:
        chdir: "{{goss_test_directory}}"
      register: test_results
      with_fileglob:
        - "{{test_path}}/test_*.yml"

    - name: Setup log directory
      local_action: file
      args:
        path: "{{log_path}}"
        state: directory
        mode: 0755

    - name: Save Goss test results
      local_action: copy
      args:
        content: "{{ item.stdout }}"
        dest: "{{log_path}}/{{item.item | basename | splitext | first}}.log"
      with_items: "{{ test_results.results }}"
      no_log: true

    - name: Fail when tests fail
      fail:
        msg: "Goss failed to validate"
      when: item.rc != 0
      with_items: "{{ test_results.results }}"
      no_log: true
