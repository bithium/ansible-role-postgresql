---
- name: Verify
  hosts: all
  vars:
    root_path: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}"
    scenario: "{{ lookup('env', 'MOLECULE_SCENARIO_NAME') }}"
    log_path: "{{ root_path }}/logs/molecule/{{ scenario }}/{{ inventory_hostname }}"
    test_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/tests"
    test_workdir: "{{ goss_test_directory }}/{{ scenario }}"

  vars_files:
    - goss.yml

  tasks:
    - name: Download Goss
      get_url:
        url: "{{ goss_url }}"
        dest: "/tmp/goss-linux-{{ goss_arch }}"
        checksum: "sha256:{{ goss_sha256sum }}"
      register: download_goss
      until: download_goss is succeeded
      retries: 3
      run_once: true
      delegate_to: localhost

    - name: Install Goss
      copy: src="/tmp/goss-linux-{{ goss_arch }}" dest="{{ goss_dst }}" mode=0755

    - name: Patch Goss for Alpine
      command: "sed -i 's/sysinit/default/' {{ goss_dst }}"
      args:
        warn: false
      when: ansible_os_family == 'Alpine'

    - name: Register available tests
      set_fact:
        molecule_tests: >
          {{ molecule_tests | default([]) | union([item | basename | splitext | first]) }}
      with_fileglob:
        - "{{ test_path }}/test_*.yml"
      run_once: true
      delegate_to: localhost

    - name: Setup test directory
      file:
        path: "{{ test_workdir }}"
        state: directory
        mode: 0755

    - name: Copy Goss tests to remote
      copy:
        src: "{{ test_path }}/{{ item }}.yml"
        dest: "{{ goss_test_directory }}/{{ scenario }}/{{ item }}.yml"
        mode: 0644
      with_items: "{{ molecule_tests }}"

    - name: Clean up previous logs
      file:
        path: "{{ goss_test_directory }}/{{ scenario }}/{{ item }}.log"
        state: absent
      with_items: "{{ molecule_tests }}"

    - name: Execute Goss tests
      shell: >
        {{ goss_dst }} --vars {{ goss_test_variables }}             \
                       -g {{ item }}.yml validate                   \
                       --format {{ goss_format }} > {{ item }}.log
      args:
        chdir: "{{ test_workdir }}"
      ignore_errors: true
      register: test_results
      with_items: "{{ molecule_tests }}"  # noqa 301

    - name: Setup log directory
      file:
        path: "{{ log_path }}"
        state: directory
        mode: 0755
      delegate_to: localhost

    - name: Save Goss test results
      fetch:
        src: "{{ test_workdir }}/{{ item }}.log"
        dest: "{{ log_path }}/"
        flat: true
      with_items: "{{ molecule_tests }}"

    - name: Fail when tests fail
      fail:
        msg: "Goss failed to validate"
      when: true in test_results | json_query('results[*].failed')
